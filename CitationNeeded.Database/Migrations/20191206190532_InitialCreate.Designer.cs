// <auto-generated />
using System;
using CitationNeeded.Database.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CitationNeeded.Database.Migrations
{
    [DbContext(typeof(CitationContext))]
    [Migration("20191206190532_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("CitationNeeded.Domain.ValueTypes.Account", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("HashedPassword");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("CitationNeeded.Domain.ValueTypes.AccountVerification", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountId");

                    b.Property<bool>("IsVerified");

                    b.Property<string>("VerificationToken");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountVerifications");
                });

            modelBuilder.Entity("CitationNeeded.Domain.ValueTypes.Citation", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CitationGroupId");

                    b.Property<string>("Speaker");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("CitationGroupId");

                    b.ToTable("Citation");
                });

            modelBuilder.Entity("CitationNeeded.Domain.ValueTypes.CitationBook", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CitationBooks");
                });

            modelBuilder.Entity("CitationNeeded.Domain.ValueTypes.CitationGroup", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuthorId");

                    b.Property<string>("CitationBookId");

                    b.Property<DateTime>("Created");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CitationBookId");

                    b.ToTable("CitationGroup");
                });

            modelBuilder.Entity("CitationNeeded.Domain.ValueTypes.AccountVerification", b =>
                {
                    b.HasOne("CitationNeeded.Domain.ValueTypes.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");
                });

            modelBuilder.Entity("CitationNeeded.Domain.ValueTypes.Citation", b =>
                {
                    b.HasOne("CitationNeeded.Domain.ValueTypes.CitationGroup")
                        .WithMany("Citations")
                        .HasForeignKey("CitationGroupId");
                });

            modelBuilder.Entity("CitationNeeded.Domain.ValueTypes.CitationGroup", b =>
                {
                    b.HasOne("CitationNeeded.Domain.ValueTypes.Account", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("CitationNeeded.Domain.ValueTypes.CitationBook")
                        .WithMany("CitationGroups")
                        .HasForeignKey("CitationBookId");
                });
#pragma warning restore 612, 618
        }
    }
}
